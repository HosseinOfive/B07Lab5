import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class RectangleTest1 {
	static double epsilon = 0.000001;
	@Test
	void testComputePerimeter1() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter2() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter3() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter4() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter5() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter6() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter7() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter8() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter9() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter10() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter11() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter12() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter13() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter14() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter15() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter16() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter17() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter18() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter19() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter20() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter21() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter22() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter23() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter24() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter25() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter26() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter27() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter28() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter29() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter30() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter31() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter32() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter33() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter34() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter35() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter36() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter37() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter38() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter39() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter40() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter41() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter42() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter43() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter44() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter45() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter46() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter47() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter48() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter49() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter50() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter51() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter52() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter53() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter54() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter55() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter56() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter57() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter58() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter59() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter60() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter61() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter62() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter63() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter64() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter65() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter66() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter67() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter68() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter69() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter70() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter71() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter72() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter73() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter74() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter75() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter76() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter77() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter78() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter79() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter80() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter81() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter82() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter83() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter84() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter85() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter86() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter87() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter88() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter89() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter90() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter91() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter92() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter93() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter94() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter95() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter96() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter97() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter98() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter99() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter100() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter101() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter102() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter103() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter104() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter105() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter106() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter107() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter108() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter109() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter110() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter111() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter112() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter113() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter114() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter115() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter116() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter117() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter118() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter119() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter120() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter121() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter122() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter123() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter124() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter125() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter126() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter127() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter128() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter129() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter130() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter131() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter132() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter133() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter134() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter135() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter136() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter137() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter138() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter139() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter140() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter141() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter142() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter143() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter144() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter145() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter146() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter147() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter148() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter149() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter150() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter151() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter152() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter153() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter154() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter155() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter156() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter157() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter158() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter159() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter160() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter161() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter162() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter163() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter164() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter165() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter166() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter167() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter168() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter169() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter170() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter171() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter172() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter173() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter174() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter175() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter176() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter177() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter178() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter179() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter180() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter181() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter182() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter183() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter184() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter185() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter186() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter187() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter188() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter189() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter190() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter191() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter192() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter193() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter194() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter195() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter196() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter197() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter198() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter199() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter200() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter201() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter202() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter203() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter204() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter205() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter206() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter207() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter208() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter209() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter210() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter211() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter212() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter213() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter214() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter215() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter216() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter217() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter218() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter219() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter220() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter221() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter222() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter223() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter224() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter225() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter226() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter227() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter228() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter229() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter230() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter231() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter232() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter233() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter234() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter235() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter236() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter237() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter238() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter239() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter240() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter241() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter242() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter243() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter244() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter245() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter246() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter247() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter248() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter249() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter250() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter251() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter252() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter253() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter254() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter255() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter256() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter257() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter258() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter259() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter260() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter261() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter262() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter263() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter264() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter265() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter266() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter267() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter268() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter269() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter270() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter271() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter272() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter273() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter274() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter275() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter276() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter277() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter278() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter279() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter280() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter281() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter282() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter283() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter284() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter285() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter286() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter287() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter288() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter289() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter290() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter291() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter292() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter293() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter294() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter295() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter296() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter297() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter298() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter299() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter300() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter301() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter302() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter303() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter304() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter305() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter306() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter307() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter308() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter309() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter310() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter311() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter312() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter313() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter314() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter315() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter316() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter317() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter318() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter319() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter320() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter321() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter322() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter323() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter324() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter325() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter326() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter327() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter328() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter329() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter330() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter331() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter332() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter333() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter334() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter335() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter336() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter337() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter338() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter339() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter340() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter341() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter342() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter343() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter344() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter345() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter346() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter347() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter348() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter349() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter350() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter351() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter352() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter353() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter354() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter355() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter356() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter357() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter358() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter359() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter360() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter361() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter362() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter363() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter364() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter365() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter366() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter367() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter368() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter369() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter370() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter371() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter372() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter373() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter374() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter375() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter376() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter377() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter378() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter379() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter380() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter381() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter382() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter383() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter384() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter385() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter386() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter387() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter388() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter389() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter390() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter391() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter392() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter393() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter394() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter395() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter396() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter397() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter398() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter399() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter400() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter401() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter402() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter403() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter404() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter405() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter406() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter407() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter408() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter409() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter410() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter411() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter412() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter413() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter414() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter415() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter416() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter417() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter418() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter419() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter420() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter421() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter422() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter423() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter424() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter425() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter426() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter427() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter428() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter429() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter430() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter431() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter432() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter433() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter434() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter435() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter436() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter437() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter438() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter439() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter440() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter441() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter442() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter443() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter444() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter445() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter446() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter447() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter448() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter449() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter450() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter451() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter452() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter453() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter454() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter455() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter456() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter457() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter458() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter459() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter460() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter461() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter462() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter463() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter464() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter465() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter466() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter467() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter468() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter469() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter470() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter471() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter472() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter473() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter474() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter475() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter476() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter477() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter478() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter479() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter480() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter481() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter482() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter483() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter484() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter485() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter486() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter487() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter488() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter489() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter490() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter491() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter492() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter493() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter494() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter495() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter496() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter497() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter498() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter499() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter500() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter501() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter502() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter503() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter504() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter505() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter506() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter507() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter508() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter509() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter510() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter511() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter512() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter513() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter514() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter515() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter516() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter517() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter518() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter519() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter520() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter521() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter522() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter523() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter524() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter525() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter526() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter527() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter528() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter529() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter530() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter531() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter532() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter533() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter534() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter535() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter536() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter537() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter538() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter539() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter540() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter541() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter542() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter543() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter544() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter545() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter546() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter547() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter548() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter549() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter550() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter551() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter552() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter553() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter554() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter555() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter556() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter557() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter558() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter559() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter560() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter561() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter562() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter563() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter564() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter565() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter566() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter567() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter568() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter569() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter570() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter571() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter572() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter573() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter574() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter575() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter576() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter577() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter578() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter579() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter580() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter581() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter582() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter583() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter584() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter585() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter586() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter587() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter588() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter589() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter590() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter591() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter592() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter593() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter594() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter595() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter596() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter597() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter598() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter599() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter600() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter601() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter602() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter603() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter604() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter605() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter606() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter607() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter608() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter609() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter610() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter611() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter612() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter613() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter614() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter615() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter616() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter617() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter618() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter619() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter620() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter621() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter622() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter623() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter624() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter625() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter626() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter627() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter628() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter629() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter630() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter631() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter632() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter633() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter634() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter635() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter636() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter637() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter638() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter639() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter640() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter641() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter642() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter643() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter644() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter645() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter646() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter647() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter648() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter649() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter650() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter651() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter652() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter653() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter654() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter655() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter656() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter657() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter658() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter659() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter660() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter661() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter662() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter663() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter664() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter665() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter666() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter667() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter668() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter669() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter670() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter671() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter672() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter673() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter674() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter675() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter676() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter677() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter678() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter679() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter680() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter681() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter682() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter683() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter684() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter685() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter686() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter687() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter688() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter689() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter690() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter691() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter692() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter693() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter694() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter695() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter696() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter697() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter698() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter699() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter700() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter701() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter702() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter703() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter704() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter705() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter706() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter707() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter708() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter709() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter710() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter711() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter712() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter713() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter714() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter715() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter716() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter717() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter718() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter719() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter720() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter721() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter722() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter723() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter724() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter725() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter726() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter727() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter728() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter729() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter730() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter731() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter732() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter733() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter734() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter735() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter736() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter737() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter738() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter739() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter740() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter741() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter742() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter743() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter744() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter745() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter746() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter747() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter748() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter749() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter750() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter751() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter752() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter753() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter754() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter755() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter756() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter757() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter758() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter759() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter760() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter761() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter762() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter763() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter764() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter765() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter766() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter767() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter768() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter769() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter770() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter771() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter772() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter773() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter774() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter775() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter776() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter777() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter778() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter779() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter780() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter781() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter782() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter783() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter784() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter785() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter786() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter787() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter788() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter789() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter790() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter791() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter792() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter793() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter794() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter795() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter796() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter797() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter798() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter799() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter800() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter801() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter802() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter803() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter804() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter805() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter806() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter807() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter808() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter809() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter810() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter811() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter812() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter813() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter814() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter815() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputePerimeter816() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea1() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea2() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea3() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea4() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea5() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea6() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea7() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea8() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea9() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea10() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea11() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea12() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea13() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea14() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea15() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea16() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea17() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea18() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea19() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea20() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea21() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea22() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea23() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea24() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea25() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea26() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea27() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea28() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea29() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea30() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea31() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea32() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea33() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea34() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea35() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea36() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea37() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea38() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea39() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea40() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea41() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea42() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea43() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea44() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea45() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea46() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea47() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea48() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea49() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea50() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea51() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea52() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea53() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea54() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea55() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea56() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea57() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea58() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea59() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea60() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea61() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea62() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea63() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea64() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea65() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea66() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea67() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea68() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea69() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea70() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea71() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea72() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea73() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea74() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea75() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea76() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea77() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea78() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea79() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea80() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea81() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea82() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea83() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea84() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea85() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea86() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea87() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea88() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea89() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea90() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea91() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea92() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea93() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea94() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea95() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea96() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea97() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea98() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea99() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea100() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea101() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea102() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea103() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea104() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea105() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea106() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea107() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea108() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea109() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea110() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea111() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea112() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea113() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea114() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea115() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea116() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea117() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea118() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea119() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea120() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea121() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea122() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea123() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea124() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea125() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea126() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea127() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea128() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea129() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea130() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea131() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea132() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea133() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea134() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea135() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea136() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea137() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea138() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea139() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea140() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea141() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea142() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea143() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea144() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea145() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea146() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea147() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea148() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea149() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea150() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea151() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea152() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea153() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea154() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea155() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea156() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea157() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea158() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea159() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea160() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea161() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea162() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea163() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea164() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea165() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea166() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea167() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea168() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea169() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea170() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea171() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea172() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea173() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea174() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea175() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea176() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea177() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea178() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea179() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea180() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea181() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea182() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea183() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea184() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea185() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea186() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea187() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea188() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea189() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea190() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea191() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea192() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea193() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea194() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea195() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea196() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea197() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea198() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea199() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea200() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea201() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea202() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea203() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea204() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea205() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea206() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea207() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea208() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea209() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea210() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea211() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea212() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea213() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea214() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea215() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea216() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea217() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea218() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea219() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea220() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea221() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea222() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea223() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea224() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea225() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea226() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea227() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea228() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea229() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea230() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea231() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea232() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea233() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea234() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea235() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea236() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea237() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea238() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea239() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea240() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea241() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea242() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea243() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea244() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea245() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea246() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea247() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea248() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea249() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea250() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea251() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea252() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea253() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea254() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea255() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea256() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea257() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea258() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea259() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea260() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea261() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea262() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea263() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea264() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea265() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea266() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea267() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea268() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea269() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea270() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea271() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea272() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea273() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea274() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea275() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea276() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea277() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea278() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea279() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea280() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea281() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea282() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea283() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea284() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea285() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea286() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea287() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea288() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea289() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea290() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea291() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea292() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea293() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea294() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea295() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea296() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea297() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea298() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea299() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea300() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea301() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea302() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea303() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea304() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea305() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea306() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea307() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea308() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea309() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea310() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea311() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea312() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea313() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea314() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea315() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea316() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea317() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea318() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea319() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea320() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea321() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea322() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea323() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea324() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea325() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea326() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea327() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea328() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea329() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea330() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea331() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea332() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea333() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea334() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea335() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea336() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea337() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea338() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea339() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea340() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea341() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea342() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea343() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea344() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea345() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea346() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea347() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea348() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea349() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea350() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea351() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea352() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea353() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea354() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea355() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea356() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea357() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea358() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea359() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea360() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea361() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea362() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea363() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea364() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea365() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea366() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea367() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea368() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea369() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea370() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea371() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea372() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea373() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea374() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea375() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea376() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea377() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea378() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea379() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea380() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea381() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea382() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea383() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea384() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea385() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea386() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea387() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea388() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea389() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea390() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea391() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea392() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea393() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea394() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea395() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea396() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea397() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea398() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea399() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea400() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea401() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea402() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea403() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea404() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea405() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea406() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea407() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea408() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea409() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea410() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea411() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea412() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea413() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea414() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea415() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea416() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea417() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea418() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea419() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea420() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea421() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea422() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea423() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea424() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea425() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea426() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea427() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea428() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea429() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea430() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea431() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea432() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea433() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea434() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea435() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea436() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea437() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea438() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea439() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea440() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea441() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea442() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea443() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea444() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea445() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea446() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea447() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea448() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea449() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea450() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea451() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea452() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea453() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea454() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea455() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea456() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea457() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea458() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea459() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea460() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea461() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea462() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea463() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea464() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea465() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea466() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea467() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea468() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea469() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea470() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea471() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea472() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea473() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea474() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea475() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea476() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea477() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea478() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea479() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea480() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea481() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea482() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea483() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea484() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea485() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea486() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea487() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea488() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea489() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea490() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea491() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea492() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea493() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea494() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea495() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea496() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea497() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea498() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea499() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea500() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea501() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea502() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea503() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea504() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea505() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea506() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea507() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea508() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea509() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea510() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea511() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea512() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea513() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea514() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea515() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea516() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea517() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea518() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea519() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea520() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea521() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea522() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea523() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea524() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea525() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea526() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea527() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea528() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea529() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea530() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea531() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea532() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea533() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea534() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea535() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea536() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea537() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea538() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea539() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea540() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea541() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea542() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea543() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea544() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea545() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea546() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea547() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea548() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea549() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea550() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea551() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea552() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea553() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea554() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea555() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea556() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea557() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea558() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea559() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea560() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea561() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea562() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea563() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea564() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea565() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea566() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea567() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea568() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea569() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea570() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea571() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea572() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea573() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea574() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea575() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea576() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea577() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea578() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea579() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea580() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea581() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea582() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea583() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea584() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea585() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea586() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea587() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea588() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea589() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea590() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea591() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea592() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea593() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea594() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea595() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea596() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea597() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea598() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea599() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea600() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea601() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea602() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea603() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea604() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea605() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea606() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea607() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea608() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea609() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea610() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea611() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea612() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea613() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea614() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea615() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea616() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea617() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea618() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea619() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea620() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea621() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea622() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea623() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea624() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea625() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea626() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea627() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea628() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea629() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea630() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea631() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea632() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea633() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea634() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea635() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea636() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea637() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea638() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea639() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea640() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea641() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea642() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea643() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea644() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea645() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea646() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea647() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea648() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea649() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea650() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea651() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea652() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea653() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea654() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea655() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea656() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea657() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea658() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea659() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea660() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea661() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea662() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea663() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea664() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea665() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea666() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea667() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea668() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea669() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea670() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea671() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea672() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea673() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea674() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea675() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea676() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea677() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea678() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea679() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea680() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea681() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea682() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea683() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea684() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea685() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea686() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea687() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea688() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea689() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea690() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea691() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea692() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea693() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea694() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea695() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea696() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea697() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea698() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea699() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea700() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea701() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea702() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea703() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea704() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea705() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea706() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea707() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea708() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea709() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea710() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea711() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea712() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea713() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea714() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea715() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea716() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea717() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea718() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea719() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea720() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea721() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea722() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea723() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea724() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea725() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea726() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea727() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea728() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea729() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea730() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea731() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea732() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea733() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea734() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea735() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea736() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea737() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea738() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea739() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea740() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea741() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea742() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea743() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea744() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea745() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea746() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea747() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea748() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea749() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea750() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea751() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea752() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea753() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea754() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea755() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea756() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea757() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea758() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea759() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea760() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea761() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea762() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea763() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea764() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea765() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea766() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea767() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea768() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea769() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea770() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea771() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea772() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea773() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea774() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea775() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea776() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea777() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea778() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea779() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea780() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea781() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea782() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea783() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea784() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea785() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea786() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea787() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea788() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea789() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea790() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea791() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea792() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea793() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea794() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea795() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea796() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea797() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea798() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea799() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea800() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea801() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea802() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea803() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea804() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea805() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea806() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea807() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea808() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea809() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea810() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea811() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea812() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea813() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea814() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea815() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testComputeArea816() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare1() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare2() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare3() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare4() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare5() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare6() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare7() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare8() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare9() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare10() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare11() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare12() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare13() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare14() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare15() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare16() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare17() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare18() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare19() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare20() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare21() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare22() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare23() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare24() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare25() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare26() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare27() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare28() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare29() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare30() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare31() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare32() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare33() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare34() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare35() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare36() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare37() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare38() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare39() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare40() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare41() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare42() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare43() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare44() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare45() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare46() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare47() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare48() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare49() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare50() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare51() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare52() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare53() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare54() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare55() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare56() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare57() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare58() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare59() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare60() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare61() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare62() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare63() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare64() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare65() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare66() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare67() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare68() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare69() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare70() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare71() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare72() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare73() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare74() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare75() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare76() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare77() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare78() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare79() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare80() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare81() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare82() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare83() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare84() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare85() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare86() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare87() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare88() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare89() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare90() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare91() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare92() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare93() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare94() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare95() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare96() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare97() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare98() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare99() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare100() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare101() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare102() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare103() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare104() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare105() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare106() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare107() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare108() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare109() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare110() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare111() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare112() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare113() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare114() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare115() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare116() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare117() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare118() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare119() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare120() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare121() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare122() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare123() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare124() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare125() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare126() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare127() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare128() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare129() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare130() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare131() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare132() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare133() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare134() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare135() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare136() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare137() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare138() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare139() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare140() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare141() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare142() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare143() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare144() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare145() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare146() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare147() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare148() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare149() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare150() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare151() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare152() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare153() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare154() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare155() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare156() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare157() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare158() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare159() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare160() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare161() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare162() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare163() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare164() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare165() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare166() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare167() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare168() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare169() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare170() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare171() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare172() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare173() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare174() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare175() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare176() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare177() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare178() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare179() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare180() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare181() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare182() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare183() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare184() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare185() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare186() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare187() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare188() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare189() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare190() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare191() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare192() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare193() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare194() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare195() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare196() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare197() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare198() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare199() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare200() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare201() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare202() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare203() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare204() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare205() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare206() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare207() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare208() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare209() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare210() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare211() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare212() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare213() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare214() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare215() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare216() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare217() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare218() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare219() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare220() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare221() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare222() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare223() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare224() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare225() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare226() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare227() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare228() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare229() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare230() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare231() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare232() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare233() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare234() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare235() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare236() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare237() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare238() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare239() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare240() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare241() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare242() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare243() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare244() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare245() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare246() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare247() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare248() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare249() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare250() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare251() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare252() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare253() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare254() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare255() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare256() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare257() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare258() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare259() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare260() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare261() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare262() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare263() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare264() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare265() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare266() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare267() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare268() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare269() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare270() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare271() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare272() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare273() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare274() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare275() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare276() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare277() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare278() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare279() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare280() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare281() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare282() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare283() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare284() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare285() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare286() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare287() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare288() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare289() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare290() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare291() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare292() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare293() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare294() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare295() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare296() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare297() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare298() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare299() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare300() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare301() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare302() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare303() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare304() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare305() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare306() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare307() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare308() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare309() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare310() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare311() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare312() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare313() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare314() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare315() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare316() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare317() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare318() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare319() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare320() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare321() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare322() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare323() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare324() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare325() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare326() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare327() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare328() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare329() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare330() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare331() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare332() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare333() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare334() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare335() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare336() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare337() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare338() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare339() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare340() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare341() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare342() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare343() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare344() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare345() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare346() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare347() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare348() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare349() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare350() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare351() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare352() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare353() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare354() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare355() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare356() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare357() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare358() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare359() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare360() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare361() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare362() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare363() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare364() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare365() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare366() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare367() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare368() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare369() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare370() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare371() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare372() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare373() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare374() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare375() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare376() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare377() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare378() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare379() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare380() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare381() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare382() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare383() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare384() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare385() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare386() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare387() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare388() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare389() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare390() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare391() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare392() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare393() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare394() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare395() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare396() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare397() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare398() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare399() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare400() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare401() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare402() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare403() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare404() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare405() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare406() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare407() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare408() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare409() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare410() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare411() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare412() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare413() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare414() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare415() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare416() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare417() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare418() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare419() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare420() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare421() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare422() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare423() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare424() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare425() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare426() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare427() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare428() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare429() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare430() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare431() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare432() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare433() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare434() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare435() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare436() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare437() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare438() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare439() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare440() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare441() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare442() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare443() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare444() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare445() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare446() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare447() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare448() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare449() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare450() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare451() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare452() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare453() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare454() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare455() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare456() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare457() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare458() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare459() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare460() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare461() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare462() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare463() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare464() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare465() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare466() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare467() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare468() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare469() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare470() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare471() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare472() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare473() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare474() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare475() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare476() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare477() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare478() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare479() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare480() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare481() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare482() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare483() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare484() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare485() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare486() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare487() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare488() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare489() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare490() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare491() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare492() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare493() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare494() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare495() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare496() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare497() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare498() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare499() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare500() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare501() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare502() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare503() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare504() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare505() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare506() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare507() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare508() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare509() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare510() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare511() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare512() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare513() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare514() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare515() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare516() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare517() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare518() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare519() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare520() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare521() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare522() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare523() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare524() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare525() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare526() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare527() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare528() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare529() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare530() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare531() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare532() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare533() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare534() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare535() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare536() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare537() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare538() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare539() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare540() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare541() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare542() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare543() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare544() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare545() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare546() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare547() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare548() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare549() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare550() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare551() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare552() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare553() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare554() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare555() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare556() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare557() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare558() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare559() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare560() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare561() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare562() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare563() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare564() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare565() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare566() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare567() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare568() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare569() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare570() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare571() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare572() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare573() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare574() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare575() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare576() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare577() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare578() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare579() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare580() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare581() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare582() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare583() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare584() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare585() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare586() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare587() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare588() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare589() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare590() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare591() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare592() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare593() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare594() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare595() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare596() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare597() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare598() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare599() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare600() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare601() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare602() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare603() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare604() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare605() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare606() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare607() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare608() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare609() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare610() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare611() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare612() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare613() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare614() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare615() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare616() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare617() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare618() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare619() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare620() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare621() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare622() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare623() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare624() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare625() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare626() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare627() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare628() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare629() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare630() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare631() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare632() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare633() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare634() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare635() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare636() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare637() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare638() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare639() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare640() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare641() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare642() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare643() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare644() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare645() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare646() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare647() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare648() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare649() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare650() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare651() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare652() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare653() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare654() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare655() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare656() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare657() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare658() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare659() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare660() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare661() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare662() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare663() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare664() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare665() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare666() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare667() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare668() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare669() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare670() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare671() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare672() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare673() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare674() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare675() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare676() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare677() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare678() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare679() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare680() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare681() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare682() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare683() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare684() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare685() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare686() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare687() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare688() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare689() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare690() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare691() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare692() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare693() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare694() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare695() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare696() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare697() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare698() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare699() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare700() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare701() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare702() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare703() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare704() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare705() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare706() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare707() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare708() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare709() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare710() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare711() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare712() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare713() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare714() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare715() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare716() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare717() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare718() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare719() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare720() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare721() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare722() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare723() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare724() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare725() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare726() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare727() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare728() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare729() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare730() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare731() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare732() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare733() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare734() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare735() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare736() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare737() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare738() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare739() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare740() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare741() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare742() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare743() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare744() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare745() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare746() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare747() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare748() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare749() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare750() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare751() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare752() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare753() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare754() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare755() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare756() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare757() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare758() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare759() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare760() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare761() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare762() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare763() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare764() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare765() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare766() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare767() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare768() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare769() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare770() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare771() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare772() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare773() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare774() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare775() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare776() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare777() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare778() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare779() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare780() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare781() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare782() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare783() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare784() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare785() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare786() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare787() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare788() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare789() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare790() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare791() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare792() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare793() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare794() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare795() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare796() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare797() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare798() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare799() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare800() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare801() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare802() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare803() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare804() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare805() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare806() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare807() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare808() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare809() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare810() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare811() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare812() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare813() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare814() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare815() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testIsSquare816() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void testConstructor1() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor2() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor3() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor4() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor5() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor6() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor7() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor8() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor9() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor10() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor11() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor12() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor13() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor14() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor15() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor16() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor17() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor18() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor19() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor20() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor21() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor22() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor23() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor24() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor25() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor26() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor27() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor28() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor29() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor30() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor31() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor32() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor33() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor34() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor35() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor36() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor37() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor38() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor39() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor40() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor41() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor42() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor43() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor44() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor45() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor46() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor47() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor48() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor49() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor50() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor51() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor52() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor53() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor54() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor55() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor56() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor57() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor58() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor59() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor60() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor61() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor62() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor63() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor64() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor65() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor66() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor67() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor68() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor69() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor70() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor71() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor72() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor73() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor74() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor75() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor76() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor77() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor78() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor79() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor80() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor81() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor82() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor83() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor84() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor85() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor86() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor87() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor88() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor89() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor90() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor91() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor92() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor93() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor94() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor95() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor96() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor97() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor98() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor99() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor100() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor101() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor102() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor103() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor104() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor105() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor106() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor107() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor108() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor109() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor110() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor111() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor112() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor113() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor114() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor115() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor116() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor117() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor118() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor119() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor120() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor121() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor122() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor123() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor124() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor125() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor126() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor127() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor128() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor129() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor130() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor131() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor132() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor133() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor134() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor135() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor136() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor137() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor138() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor139() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor140() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor141() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor142() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor143() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor144() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor145() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor146() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor147() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor148() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor149() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor150() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor151() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor152() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor153() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor154() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor155() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor156() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor157() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor158() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor159() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor160() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor161() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor162() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor163() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor164() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor165() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor166() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor167() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor168() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor169() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor170() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor171() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor172() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor173() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor174() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor175() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor176() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor177() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor178() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor179() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor180() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor181() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor182() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor183() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor184() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor185() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor186() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor187() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor188() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor189() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor190() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor191() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor192() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor193() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor194() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor195() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor196() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor197() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor198() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor199() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor200() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor201() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor202() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor203() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor204() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor205() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor206() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor207() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor208() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor209() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor210() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor211() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor212() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor213() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor214() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor215() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor216() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor217() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor218() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor219() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor220() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor221() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor222() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor223() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor224() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor225() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor226() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor227() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor228() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor229() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor230() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor231() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor232() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor233() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor234() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor235() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor236() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor237() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor238() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor239() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor240() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor241() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor242() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor243() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor244() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor245() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor246() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor247() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor248() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor249() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor250() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor251() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor252() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor253() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor254() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor255() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor256() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor257() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor258() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor259() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor260() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor261() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor262() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor263() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor264() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor265() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor266() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor267() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor268() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor269() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor270() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor271() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor272() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor273() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor274() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor275() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor276() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor277() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor278() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor279() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor280() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor281() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor282() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor283() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor284() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor285() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor286() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor287() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor288() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor289() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor290() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor291() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor292() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor293() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor294() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor295() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor296() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor297() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor298() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor299() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor300() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor301() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor302() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor303() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor304() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor305() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor306() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor307() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor308() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor309() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor310() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor311() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor312() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor313() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor314() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor315() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor316() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor317() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor318() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor319() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor320() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor321() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor322() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor323() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor324() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor325() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor326() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor327() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor328() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor329() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor330() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor331() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor332() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor333() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor334() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor335() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor336() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor337() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor338() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor339() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor340() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor341() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor342() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor343() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor344() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor345() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor346() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor347() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor348() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor349() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor350() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor351() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor352() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor353() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor354() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor355() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor356() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor357() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor358() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor359() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor360() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor361() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor362() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor363() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor364() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor365() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor366() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor367() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor368() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor369() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor370() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor371() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor372() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor373() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor374() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor375() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor376() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor377() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor378() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor379() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor380() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor381() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor382() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor383() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor384() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor385() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor386() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor387() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor388() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor389() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor390() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor391() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor392() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor393() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor394() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor395() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor396() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor397() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor398() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor399() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor400() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor401() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor402() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor403() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor404() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor405() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor406() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor407() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor408() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor409() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor410() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor411() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor412() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor413() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor414() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor415() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor416() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor417() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor418() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor419() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor420() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor421() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor422() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor423() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor424() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor425() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor426() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor427() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor428() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor429() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor430() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor431() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor432() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor433() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor434() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor435() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor436() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor437() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor438() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor439() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor440() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor441() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor442() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor443() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor444() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor445() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor446() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor447() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor448() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor449() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor450() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor451() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor452() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor453() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor454() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor455() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor456() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor457() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor458() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor459() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor460() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor461() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor462() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor463() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor464() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor465() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor466() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor467() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor468() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor469() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor470() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor471() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor472() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor473() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor474() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor475() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor476() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor477() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor478() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor479() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor480() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor481() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor482() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor483() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor484() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor485() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor486() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor487() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor488() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor489() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor490() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor491() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor492() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor493() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor494() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor495() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor496() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor497() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor498() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor499() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor500() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor501() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor502() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor503() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor504() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor505() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor506() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor507() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor508() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor509() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor510() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor511() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor512() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor513() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor514() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor515() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor516() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor517() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor518() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor519() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor520() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor521() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor522() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor523() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor524() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor525() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor526() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor527() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor528() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor529() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor530() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor531() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor532() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor533() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor534() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor535() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor536() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor537() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor538() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor539() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor540() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor541() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor542() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor543() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor544() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor545() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor546() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor547() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor548() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor549() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor550() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor551() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor552() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor553() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor554() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor555() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor556() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor557() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor558() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor559() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor560() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor561() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor562() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor563() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor564() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor565() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor566() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor567() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor568() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor569() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor570() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor571() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor572() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor573() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor574() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor575() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor576() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor577() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor578() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor579() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor580() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor581() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor582() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor583() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor584() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor585() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor586() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor587() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor588() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor589() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor590() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor591() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor592() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor593() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor594() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor595() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor596() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor597() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor598() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor599() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor600() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor601() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor602() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor603() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor604() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor605() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor606() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor607() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor608() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor609() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor610() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor611() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor612() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor613() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor614() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor615() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor616() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor617() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor618() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor619() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor620() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor621() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor622() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor623() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor624() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor625() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor626() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor627() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor628() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor629() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor630() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor631() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor632() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor633() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor634() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor635() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor636() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor637() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor638() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor639() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor640() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor641() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor642() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor643() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor644() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor645() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor646() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor647() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor648() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor649() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor650() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor651() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor652() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor653() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor654() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor655() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor656() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor657() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor658() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor659() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor660() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor661() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor662() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor663() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor664() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor665() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor666() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor667() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor668() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor669() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor670() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor671() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor672() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor673() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor674() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor675() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor676() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor677() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor678() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor679() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor680() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor681() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor682() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor683() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor684() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor685() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor686() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor687() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor688() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor689() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor690() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor691() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor692() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor693() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor694() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor695() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor696() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor697() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor698() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor699() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor700() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor701() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor702() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor703() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor704() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor705() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor706() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor707() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor708() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor709() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor710() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor711() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor712() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor713() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor714() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor715() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor716() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor717() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor718() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor719() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor720() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor721() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor722() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor723() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor724() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor725() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor726() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor727() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor728() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor729() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor730() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor731() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor732() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor733() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor734() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor735() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor736() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor737() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor738() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor739() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor740() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor741() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor742() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor743() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor744() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor745() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor746() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor747() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor748() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor749() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor750() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor751() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor752() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor753() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor754() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor755() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor756() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor757() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor758() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor759() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor760() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor761() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor762() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor763() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor764() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor765() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor766() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor767() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor768() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor769() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor770() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor771() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor772() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor773() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor774() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor775() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor776() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor777() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor778() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor779() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor780() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor781() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor782() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor783() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor784() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor785() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor786() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor787() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor788() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor789() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor790() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor791() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor792() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor793() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor794() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor795() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor796() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor797() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor798() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor799() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor800() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor801() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor802() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor803() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor804() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor805() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor806() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor807() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor808() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor809() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor810() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor811() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor812() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor813() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor814() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor815() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void testConstructor816() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}
}