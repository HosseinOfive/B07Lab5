import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class RectangleTest1 {
	static double epsilon = 0.000001;
	@Test
	void test_computePerimeter1() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter2() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter3() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter4() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter5() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter6() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter7() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter8() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter9() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter10() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter11() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter12() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter13() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter14() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter15() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter16() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter17() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter18() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter19() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter20() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter21() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter22() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter23() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter24() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter25() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter26() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter27() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter28() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter29() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter30() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter31() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter32() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter33() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter34() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter35() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter36() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter37() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter38() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter39() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter40() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter41() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter42() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter43() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter44() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter45() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter46() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter47() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter48() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter49() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter50() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter51() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter52() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter53() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter54() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter55() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter56() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter57() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter58() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter59() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter60() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter61() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter62() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter63() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter64() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter65() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter66() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter67() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter68() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter69() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter70() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter71() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter72() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter73() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter74() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter75() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter76() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter77() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter78() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter79() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter80() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter81() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter82() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter83() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter84() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter85() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter86() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter87() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter88() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter89() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter90() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter91() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter92() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter93() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter94() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter95() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter96() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter97() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter98() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter99() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter100() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter101() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter102() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter103() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter104() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter105() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter106() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter107() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter108() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter109() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter110() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter111() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter112() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter113() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter114() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter115() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter116() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter117() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter118() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter119() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter120() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter121() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter122() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter123() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter124() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter125() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter126() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter127() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter128() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter129() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter130() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter131() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter132() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter133() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter134() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter135() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter136() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter137() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter138() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter139() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter140() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter141() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter142() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter143() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter144() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter145() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter146() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter147() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter148() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter149() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter150() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter151() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter152() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter153() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter154() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter155() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter156() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter157() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter158() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter159() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter160() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter161() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter162() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter163() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter164() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter165() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter166() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter167() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter168() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter169() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter170() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter171() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter172() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter173() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter174() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter175() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter176() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter177() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter178() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter179() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter180() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter181() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter182() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter183() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter184() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter185() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter186() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter187() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter188() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter189() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter190() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter191() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter192() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter193() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter194() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter195() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter196() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter197() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter198() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter199() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter200() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter201() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter202() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter203() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter204() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter205() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter206() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter207() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter208() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter209() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter210() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter211() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter212() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter213() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter214() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter215() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter216() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter217() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter218() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter219() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter220() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter221() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter222() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter223() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter224() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter225() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter226() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter227() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter228() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter229() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter230() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter231() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter232() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter233() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter234() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter235() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter236() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter237() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter238() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter239() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter240() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter241() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter242() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter243() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter244() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter245() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter246() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter247() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter248() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter249() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter250() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter251() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter252() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter253() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter254() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter255() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter256() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter257() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter258() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter259() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter260() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter261() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter262() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter263() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter264() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter265() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter266() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter267() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter268() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter269() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter270() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter271() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter272() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter273() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter274() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter275() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter276() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter277() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter278() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter279() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter280() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter281() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter282() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter283() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter284() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter285() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter286() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter287() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter288() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter289() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter290() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter291() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter292() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter293() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter294() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter295() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter296() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter297() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter298() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter299() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter300() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter301() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter302() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter303() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter304() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter305() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter306() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter307() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter308() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter309() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter310() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter311() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter312() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter313() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter314() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter315() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter316() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter317() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter318() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter319() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter320() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter321() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter322() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter323() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter324() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter325() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter326() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter327() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter328() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter329() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter330() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter331() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter332() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter333() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter334() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter335() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter336() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter337() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter338() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter339() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter340() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter341() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter342() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter343() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter344() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter345() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter346() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter347() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter348() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter349() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter350() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter351() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter352() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter353() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter354() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter355() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter356() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter357() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter358() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter359() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter360() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter361() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter362() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter363() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter364() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter365() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter366() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter367() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter368() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter369() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter370() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter371() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter372() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter373() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter374() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter375() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter376() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter377() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter378() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter379() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter380() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter381() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter382() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter383() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter384() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter385() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter386() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter387() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter388() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter389() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter390() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter391() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter392() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter393() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter394() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter395() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter396() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter397() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter398() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter399() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter400() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter401() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter402() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter403() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter404() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter405() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter406() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter407() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter408() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 10) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter409() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter410() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter411() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter412() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter413() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter414() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter415() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter416() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter417() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter418() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter419() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter420() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter421() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter422() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter423() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter424() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter425() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter426() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter427() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter428() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter429() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter430() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter431() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter432() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter433() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter434() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter435() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter436() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter437() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter438() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter439() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter440() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter441() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter442() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter443() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter444() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter445() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter446() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter447() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter448() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter449() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter450() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter451() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter452() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter453() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter454() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter455() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter456() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter457() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter458() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter459() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter460() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter461() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter462() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter463() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter464() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter465() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter466() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter467() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter468() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter469() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter470() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter471() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter472() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter473() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter474() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter475() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter476() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter477() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter478() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter479() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter480() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter481() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter482() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter483() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter484() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter485() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter486() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter487() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter488() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter489() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter490() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter491() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter492() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter493() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter494() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter495() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter496() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter497() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter498() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter499() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter500() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter501() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter502() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter503() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter504() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter505() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter506() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter507() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter508() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter509() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter510() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter511() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter512() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter513() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter514() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter515() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter516() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter517() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter518() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter519() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter520() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter521() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter522() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter523() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter524() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter525() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter526() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter527() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter528() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter529() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter530() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter531() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter532() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter533() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter534() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter535() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter536() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter537() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter538() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter539() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter540() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter541() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter542() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter543() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter544() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter545() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter546() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter547() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter548() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter549() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter550() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter551() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter552() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter553() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter554() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter555() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter556() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter557() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter558() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter559() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter560() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter561() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter562() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter563() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter564() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter565() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter566() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter567() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter568() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter569() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter570() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter571() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter572() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter573() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter574() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter575() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter576() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter577() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter578() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter579() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter580() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter581() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter582() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter583() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter584() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter585() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter586() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter587() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter588() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter589() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter590() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter591() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter592() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter593() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter594() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter595() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter596() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter597() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter598() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter599() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter600() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter601() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter602() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter603() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter604() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter605() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter606() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter607() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter608() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter609() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter610() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter611() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter612() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter613() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter614() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter615() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter616() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter617() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter618() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter619() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter620() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter621() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter622() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter623() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter624() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter625() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter626() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter627() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter628() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter629() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter630() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter631() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter632() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter633() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter634() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter635() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter636() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter637() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter638() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter639() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter640() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter641() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter642() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter643() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter644() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter645() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter646() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter647() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter648() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter649() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter650() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter651() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter652() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter653() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter654() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter655() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter656() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter657() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter658() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter659() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter660() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter661() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter662() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter663() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter664() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter665() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter666() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter667() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter668() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter669() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter670() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter671() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter672() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter673() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter674() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter675() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter676() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter677() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter678() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter679() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter680() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter681() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter682() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter683() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter684() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter685() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter686() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter687() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter688() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter689() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter690() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter691() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter692() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter693() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter694() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter695() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter696() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter697() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter698() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter699() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter700() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter701() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter702() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter703() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter704() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter705() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter706() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter707() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter708() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter709() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter710() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter711() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter712() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter713() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter714() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter715() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter716() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter717() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter718() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter719() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter720() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter721() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter722() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter723() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter724() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter725() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter726() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter727() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter728() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter729() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter730() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter731() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter732() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter733() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter734() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter735() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter736() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter737() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter738() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter739() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter740() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter741() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter742() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter743() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter744() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter745() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter746() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter747() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter748() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter749() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter750() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter751() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter752() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter753() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter754() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter755() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter756() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter757() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter758() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter759() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter760() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter761() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter762() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter763() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter764() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter765() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter766() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter767() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter768() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter769() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter770() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter771() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter772() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter773() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter774() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter775() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter776() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter777() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter778() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter779() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter780() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter781() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter782() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter783() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter784() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter785() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter786() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter787() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter788() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter789() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter790() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter791() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter792() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter793() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter794() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter795() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter796() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter797() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter798() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter799() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter800() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter801() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter802() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter803() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter804() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter805() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter806() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter807() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter808() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter809() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter810() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter811() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter812() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter813() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter814() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter815() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computePerimeter816() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computePerimeter() - 8) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea1() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea2() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea3() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea4() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea5() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea6() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea7() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea8() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea9() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea10() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea11() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea12() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea13() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea14() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea15() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea16() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea17() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea18() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea19() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea20() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea21() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea22() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea23() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea24() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea25() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea26() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea27() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea28() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea29() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea30() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea31() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea32() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea33() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea34() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea35() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea36() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea37() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea38() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea39() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea40() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea41() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea42() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea43() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea44() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea45() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea46() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea47() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea48() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea49() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea50() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea51() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea52() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea53() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea54() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea55() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea56() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea57() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea58() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea59() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea60() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea61() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea62() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea63() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea64() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea65() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea66() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea67() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea68() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea69() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea70() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea71() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea72() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea73() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea74() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea75() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea76() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea77() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea78() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea79() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea80() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea81() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea82() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea83() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea84() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea85() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea86() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea87() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea88() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea89() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea90() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea91() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea92() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea93() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea94() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea95() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea96() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea97() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea98() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea99() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea100() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea101() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea102() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea103() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea104() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea105() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea106() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea107() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea108() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea109() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea110() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea111() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea112() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea113() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea114() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea115() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea116() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea117() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea118() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea119() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea120() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea121() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea122() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea123() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea124() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea125() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea126() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea127() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea128() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea129() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea130() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea131() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea132() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea133() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea134() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea135() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea136() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea137() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea138() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea139() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea140() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea141() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea142() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea143() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea144() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea145() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea146() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea147() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea148() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea149() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea150() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea151() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea152() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea153() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea154() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea155() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea156() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea157() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea158() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea159() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea160() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea161() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea162() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea163() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea164() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea165() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea166() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea167() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea168() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea169() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea170() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea171() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea172() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea173() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea174() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea175() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea176() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea177() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea178() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea179() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea180() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea181() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea182() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea183() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea184() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea185() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea186() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea187() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea188() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea189() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea190() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea191() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea192() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea193() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea194() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea195() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea196() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea197() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea198() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea199() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea200() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea201() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea202() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea203() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea204() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea205() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea206() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea207() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea208() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea209() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea210() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea211() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea212() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea213() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea214() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea215() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea216() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea217() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea218() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea219() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea220() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea221() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea222() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea223() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea224() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea225() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea226() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea227() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea228() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea229() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea230() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea231() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea232() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea233() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea234() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea235() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea236() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea237() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea238() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea239() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea240() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea241() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea242() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea243() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea244() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea245() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea246() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea247() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea248() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea249() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea250() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea251() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea252() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea253() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea254() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea255() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea256() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea257() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea258() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea259() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea260() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea261() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea262() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea263() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea264() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea265() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea266() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea267() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea268() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea269() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea270() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea271() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea272() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea273() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea274() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea275() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea276() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea277() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea278() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea279() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea280() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea281() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea282() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea283() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea284() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea285() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea286() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea287() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea288() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea289() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea290() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea291() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea292() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea293() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea294() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea295() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea296() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea297() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea298() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea299() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea300() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea301() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea302() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea303() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea304() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea305() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea306() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea307() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea308() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea309() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea310() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea311() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea312() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea313() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea314() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea315() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea316() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea317() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea318() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea319() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea320() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea321() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea322() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea323() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea324() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea325() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea326() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea327() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea328() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea329() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea330() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea331() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea332() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea333() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea334() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea335() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea336() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea337() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea338() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea339() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea340() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea341() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea342() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea343() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea344() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea345() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea346() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea347() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea348() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea349() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea350() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea351() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea352() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea353() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea354() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea355() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea356() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea357() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea358() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea359() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea360() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea361() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea362() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea363() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea364() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea365() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea366() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea367() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea368() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea369() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea370() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea371() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea372() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea373() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea374() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea375() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea376() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea377() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea378() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea379() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea380() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea381() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea382() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea383() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea384() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea385() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea386() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea387() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea388() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea389() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea390() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea391() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea392() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea393() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea394() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea395() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea396() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea397() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea398() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea399() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea400() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea401() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea402() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea403() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea404() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea405() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea406() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea407() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea408() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 6) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea409() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea410() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea411() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea412() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea413() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea414() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea415() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea416() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea417() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea418() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea419() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea420() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea421() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea422() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea423() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea424() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea425() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea426() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea427() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea428() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea429() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea430() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea431() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea432() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea433() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea434() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea435() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea436() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea437() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea438() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea439() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea440() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea441() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea442() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea443() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea444() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea445() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea446() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea447() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea448() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea449() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea450() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea451() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea452() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea453() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea454() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea455() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea456() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea457() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea458() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea459() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea460() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea461() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea462() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea463() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea464() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea465() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea466() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea467() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea468() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea469() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea470() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea471() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea472() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea473() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea474() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea475() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea476() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea477() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea478() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea479() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea480() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea481() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea482() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea483() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea484() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea485() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea486() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea487() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea488() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea489() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea490() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea491() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea492() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea493() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea494() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea495() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea496() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea497() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea498() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea499() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea500() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea501() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea502() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea503() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea504() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea505() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea506() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea507() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea508() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea509() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea510() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea511() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea512() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea513() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea514() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea515() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea516() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea517() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea518() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea519() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea520() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea521() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea522() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea523() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea524() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea525() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea526() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea527() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea528() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea529() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea530() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea531() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea532() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea533() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea534() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea535() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea536() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea537() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea538() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea539() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea540() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea541() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea542() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea543() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea544() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea545() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea546() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea547() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea548() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea549() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea550() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea551() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea552() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea553() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea554() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea555() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea556() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea557() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea558() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea559() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea560() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea561() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea562() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea563() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea564() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea565() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea566() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea567() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea568() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea569() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea570() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea571() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea572() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea573() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea574() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea575() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea576() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea577() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea578() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea579() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea580() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea581() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea582() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea583() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea584() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea585() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea586() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea587() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea588() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea589() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea590() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea591() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea592() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea593() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea594() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea595() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea596() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea597() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea598() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea599() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea600() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea601() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea602() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea603() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea604() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea605() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea606() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea607() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea608() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea609() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea610() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea611() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea612() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea613() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea614() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea615() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea616() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea617() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea618() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea619() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea620() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea621() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea622() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea623() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea624() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea625() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea626() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea627() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea628() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea629() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea630() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea631() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea632() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea633() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea634() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea635() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea636() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea637() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea638() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea639() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea640() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea641() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea642() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea643() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea644() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea645() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea646() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea647() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea648() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea649() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea650() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea651() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea652() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea653() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea654() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea655() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea656() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea657() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea658() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea659() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea660() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea661() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea662() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea663() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea664() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea665() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea666() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea667() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea668() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea669() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea670() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea671() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea672() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea673() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea674() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea675() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea676() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea677() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea678() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea679() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea680() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea681() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea682() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea683() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea684() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea685() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea686() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea687() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea688() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea689() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea690() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea691() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea692() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea693() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea694() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea695() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea696() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea697() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea698() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea699() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea700() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea701() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea702() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea703() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea704() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea705() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea706() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea707() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea708() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea709() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea710() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea711() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea712() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea713() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea714() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea715() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea716() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea717() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea718() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea719() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea720() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea721() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea722() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea723() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea724() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea725() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea726() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea727() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea728() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea729() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea730() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea731() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea732() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea733() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea734() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea735() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea736() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea737() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea738() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea739() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea740() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea741() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea742() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea743() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea744() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea745() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea746() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea747() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea748() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea749() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea750() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea751() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea752() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea753() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea754() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea755() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea756() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea757() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea758() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea759() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea760() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea761() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea762() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea763() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea764() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea765() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea766() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea767() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea768() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea769() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea770() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea771() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea772() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea773() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea774() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea775() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea776() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea777() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea778() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea779() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea780() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea781() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea782() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea783() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea784() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea785() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea786() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea787() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea788() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea789() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea790() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea791() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea792() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea793() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea794() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea795() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea796() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea797() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea798() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea799() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea800() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea801() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea802() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea803() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea804() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea805() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea806() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea807() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea808() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea809() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea810() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea811() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea812() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea813() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea814() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea815() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_computeArea816() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(Math.abs(r.computeArea() - 4) < epsilon);
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare1() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare2() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare3() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare4() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare5() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare6() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare7() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare8() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare9() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare10() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare11() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare12() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare13() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare14() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare15() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare16() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare17() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare18() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare19() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare20() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare21() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare22() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare23() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare24() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare25() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare26() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare27() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare28() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare29() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare30() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare31() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare32() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare33() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare34() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare35() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare36() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare37() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare38() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare39() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare40() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare41() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare42() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare43() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare44() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare45() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare46() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare47() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare48() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(1.598076, 3.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare49() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare50() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare51() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare52() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare53() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare54() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare55() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare56() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare57() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare58() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare59() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare60() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare61() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare62() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare63() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare64() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare65() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare66() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare67() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare68() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare69() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare70() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare71() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare72() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.707107, 3.535534);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare73() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare74() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare75() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare76() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare77() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare78() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare79() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare80() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare81() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare82() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare83() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare84() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare85() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare86() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare87() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare88() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare89() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare90() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare91() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare92() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare93() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare94() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare95() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare96() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.232051, 3.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare97() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare98() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare99() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare100() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare101() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare102() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare103() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare104() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare105() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare106() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare107() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare108() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare109() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare110() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare111() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare112() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare113() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare114() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare115() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare116() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare117() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare118() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare119() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare120() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 3.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare121() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare122() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare123() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare124() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare125() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare126() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare127() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare128() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare129() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare130() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare131() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare132() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare133() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare134() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare135() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare136() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare137() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare138() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare139() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare140() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare141() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare142() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare143() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare144() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-3.232051, 1.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare145() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare146() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare147() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare148() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare149() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare150() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare151() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare152() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare153() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare154() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare155() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare156() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare157() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare158() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare159() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare160() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare161() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare162() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare163() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare164() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare165() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare166() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare167() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare168() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-3.535534, 0.707107);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare169() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare170() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare171() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare172() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare173() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare174() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare175() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare176() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare177() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare178() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare179() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare180() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare181() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare182() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare183() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare184() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare185() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare186() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare187() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare188() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare189() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare190() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare191() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare192() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-3.598076, -0.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare193() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare194() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare195() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare196() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare197() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare198() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare199() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare200() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare201() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare202() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare203() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare204() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare205() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare206() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare207() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare208() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare209() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare210() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare211() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare212() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare213() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare214() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare215() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare216() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare217() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare218() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare219() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare220() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare221() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare222() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare223() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare224() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare225() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare226() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare227() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare228() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare229() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare230() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare231() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare232() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare233() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare234() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare235() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare236() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare237() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare238() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare239() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare240() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-1.598076, -3.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare241() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare242() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare243() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare244() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare245() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare246() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare247() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare248() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare249() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare250() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare251() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare252() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare253() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare254() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare255() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare256() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare257() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare258() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare259() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare260() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare261() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare262() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare263() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare264() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.707107, -3.535534);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare265() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare266() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare267() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare268() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare269() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare270() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare271() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare272() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare273() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare274() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare275() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare276() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare277() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare278() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare279() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare280() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare281() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare282() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare283() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare284() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare285() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare286() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare287() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare288() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.232051, -3.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare289() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare290() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare291() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare292() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare293() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare294() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare295() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare296() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare297() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare298() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare299() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare300() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare301() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare302() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare303() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare304() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare305() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare306() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare307() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare308() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare309() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare310() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare311() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare312() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -3.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare313() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare314() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare315() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare316() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare317() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare318() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare319() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare320() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare321() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare322() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare323() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare324() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare325() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare326() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare327() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare328() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare329() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare330() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare331() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare332() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare333() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare334() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare335() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare336() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(3.232051, -1.598076);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare337() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare338() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare339() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare340() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare341() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare342() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare343() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare344() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare345() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare346() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare347() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare348() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare349() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare350() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare351() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare352() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare353() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare354() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare355() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare356() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare357() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare358() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare359() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare360() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(3.535534, -0.707107);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare361() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare362() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare363() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare364() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare365() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare366() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare367() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare368() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare369() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare370() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare371() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare372() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare373() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare374() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare375() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare376() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare377() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare378() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare379() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare380() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare381() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare382() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare383() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare384() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(3.598076, 0.232051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare385() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare386() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare387() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare388() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare389() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare390() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare391() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare392() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare393() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare394() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare395() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare396() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare397() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare398() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare399() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare400() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare401() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare402() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare403() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare404() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare405() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare406() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare407() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare408() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertFalse(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare409() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare410() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare411() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare412() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare413() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare414() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare415() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare416() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare417() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare418() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare419() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare420() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare421() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare422() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare423() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare424() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare425() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare426() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare427() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare428() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare429() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare430() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare431() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare432() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare433() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare434() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare435() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare436() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare437() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare438() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare439() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare440() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare441() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare442() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare443() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare444() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare445() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare446() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare447() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare448() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare449() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare450() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare451() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare452() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare453() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare454() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare455() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare456() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare457() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare458() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare459() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare460() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare461() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare462() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare463() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare464() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare465() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare466() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare467() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare468() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare469() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare470() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare471() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare472() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare473() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare474() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare475() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare476() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare477() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare478() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare479() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare480() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(0.0, 2.828427);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare481() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare482() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare483() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare484() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare485() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare486() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare487() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare488() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare489() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare490() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare491() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare492() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare493() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare494() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare495() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare496() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare497() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare498() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare499() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare500() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare501() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare502() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare503() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare504() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-0.732051, 2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare505() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare506() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare507() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare508() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare509() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare510() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare511() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare512() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare513() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare514() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare515() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare516() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare517() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare518() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare519() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare520() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare521() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare522() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare523() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare524() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare525() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare526() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare527() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare528() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare529() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare530() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare531() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare532() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare533() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare534() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare535() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare536() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare537() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare538() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare539() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare540() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare541() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare542() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare543() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare544() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare545() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare546() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare547() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare548() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare549() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare550() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare551() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare552() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare553() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare554() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare555() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare556() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare557() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare558() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare559() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare560() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare561() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare562() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare563() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare564() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare565() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare566() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare567() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare568() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare569() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare570() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare571() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare572() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare573() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare574() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare575() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare576() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.828427, 0.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare577() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare578() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare579() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare580() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare581() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare582() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare583() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare584() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare585() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare586() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare587() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare588() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare589() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare590() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare591() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare592() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare593() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare594() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare595() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare596() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare597() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare598() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare599() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare600() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare601() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare602() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare603() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare604() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare605() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare606() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare607() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare608() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare609() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare610() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare611() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare612() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare613() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare614() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare615() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare616() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare617() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare618() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare619() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare620() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare621() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare622() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare623() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare624() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare625() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare626() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare627() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare628() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare629() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare630() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare631() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare632() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare633() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare634() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare635() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare636() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare637() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare638() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare639() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare640() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare641() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare642() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare643() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare644() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare645() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare646() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare647() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare648() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare649() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare650() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare651() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare652() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare653() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare654() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare655() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare656() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare657() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare658() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare659() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare660() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare661() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare662() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare663() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare664() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare665() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare666() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare667() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare668() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare669() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare670() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare671() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare672() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-0.0, -2.828427);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare673() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare674() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare675() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare676() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare677() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare678() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare679() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare680() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare681() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare682() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare683() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare684() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare685() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare686() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare687() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare688() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare689() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare690() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare691() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare692() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare693() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare694() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare695() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare696() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(0.732051, -2.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare697() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare698() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare699() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare700() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare701() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare702() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare703() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare704() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare705() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare706() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare707() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare708() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare709() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare710() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare711() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare712() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare713() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare714() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare715() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare716() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare717() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare718() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare719() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare720() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare721() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare722() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare723() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare724() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare725() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare726() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare727() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare728() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare729() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare730() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare731() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare732() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare733() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare734() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare735() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare736() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare737() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare738() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare739() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare740() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare741() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare742() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare743() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare744() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(2.732051, -0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare745() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare746() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare747() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare748() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare749() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare750() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare751() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare752() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare753() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare754() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare755() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare756() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare757() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare758() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare759() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare760() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare761() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare762() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare763() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare764() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare765() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare766() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare767() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare768() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.828427, -0.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare769() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare770() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare771() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare772() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare773() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare774() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare775() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare776() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare777() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare778() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare779() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare780() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare781() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare782() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare783() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare784() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare785() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare786() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare787() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare788() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare789() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare790() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare791() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare792() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.732051, 0.732051);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare793() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare794() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare795() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare796() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare797() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare798() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare799() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare800() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare801() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare802() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare803() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare804() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare805() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare806() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare807() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare808() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare809() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare810() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare811() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare812() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare813() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare814() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare815() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_isSquare816() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(2.0, 2.0);

		try {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			assertTrue(r.isSquare());
		} catch(Exception e) {}
	}

	@Test
	void test_Constructor1() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor2() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor3() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor4() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor5() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor6() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor7() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor8() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor9() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor10() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor11() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor12() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor13() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor14() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor15() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor16() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor17() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor18() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor19() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor20() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor21() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor22() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor23() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor24() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor25() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor26() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor27() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor28() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor29() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor30() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor31() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor32() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor33() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor34() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor35() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor36() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor37() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor38() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor39() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor40() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor41() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor42() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor43() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor44() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor45() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor46() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor47() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor48() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, 1.0);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(-1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor49() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor50() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor51() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor52() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor53() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor54() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor55() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor56() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor57() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor58() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor59() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor60() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor61() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor62() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor63() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor64() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor65() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor66() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor67() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor68() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor69() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor70() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor71() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor72() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, 1.414214);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(-1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor73() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor74() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor75() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor76() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor77() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor78() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor79() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor80() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor81() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor82() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor83() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor84() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor85() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor86() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor87() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor88() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor89() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor90() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor91() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor92() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor93() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor94() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor95() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor96() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, 1.732051);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(-1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor97() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor98() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor99() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor100() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor101() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor102() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor103() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor104() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor105() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor106() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor107() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor108() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor109() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor110() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor111() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor112() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor113() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor114() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor115() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor116() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor117() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor118() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor119() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor120() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 2.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(-2.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor121() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor122() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor123() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor124() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor125() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor126() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor127() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor128() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor129() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor130() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor131() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor132() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor133() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor134() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor135() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor136() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor137() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor138() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor139() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor140() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor141() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor142() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor143() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor144() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, 1.732051);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor145() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor146() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor147() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor148() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor149() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor150() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor151() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor152() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor153() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor154() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor155() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor156() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor157() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor158() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor159() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor160() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor161() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor162() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor163() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor164() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor165() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor166() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor167() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor168() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, 1.414214);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor169() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor170() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor171() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor172() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor173() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor174() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor175() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor176() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor177() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor178() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor179() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor180() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor181() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor182() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor183() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor184() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor185() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor186() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor187() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor188() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor189() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor190() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor191() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor192() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, 1.0);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor193() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor194() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor195() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor196() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor197() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor198() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor199() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor200() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor201() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor202() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor203() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor204() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor205() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor206() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor207() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor208() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor209() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor210() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor211() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor212() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor213() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor214() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor215() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor216() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-0.0, -2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor217() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor218() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor219() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor220() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor221() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor222() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor223() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor224() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor225() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor226() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor227() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor228() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor229() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor230() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor231() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor232() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor233() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor234() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor235() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor236() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor237() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor238() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor239() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor240() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.732051, -1.0);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(1.0, -1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor241() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor242() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor243() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor244() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor245() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor246() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor247() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor248() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor249() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor250() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor251() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor252() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor253() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor254() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor255() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor256() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor257() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor258() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor259() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor260() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor261() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor262() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor263() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor264() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.414214, -1.414214);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(1.414214, -1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor265() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor266() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor267() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor268() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor269() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor270() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor271() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor272() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor273() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor274() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor275() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor276() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor277() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor278() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor279() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor280() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor281() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor282() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor283() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor284() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor285() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor286() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor287() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor288() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.0, -1.732051);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(1.732051, -1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor289() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor290() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor291() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor292() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor293() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor294() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor295() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor296() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor297() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor298() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor299() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor300() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor301() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor302() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor303() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor304() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor305() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor306() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor307() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor308() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor309() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor310() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor311() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor312() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -2.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(2.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor313() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor314() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor315() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor316() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor317() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor318() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor319() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor320() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor321() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor322() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor323() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor324() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor325() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor326() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor327() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor328() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor329() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor330() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor331() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor332() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor333() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor334() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor335() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor336() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.0, -1.732051);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.732051, 1.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor337() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor338() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor339() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor340() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor341() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor342() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor343() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor344() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor345() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor346() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor347() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor348() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor349() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor350() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor351() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor352() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor353() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor354() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor355() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor356() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor357() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor358() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor359() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor360() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.414214, -1.414214);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(1.414214, 1.414214);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor361() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor362() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor363() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor364() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor365() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor366() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor367() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor368() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor369() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor370() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor371() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor372() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor373() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor374() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor375() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor376() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor377() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor378() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor379() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor380() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor381() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor382() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor383() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor384() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.732051, -1.0);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(1.0, 1.732051);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor385() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor386() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor387() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor388() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor389() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor390() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor391() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor392() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor393() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor394() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor395() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor396() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor397() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor398() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor399() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor400() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor401() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor402() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor403() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor404() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor405() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor406() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor407() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor408() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(0.0, 2.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor409() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor410() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor411() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor412() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor413() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor414() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor415() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor416() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor417() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor418() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor419() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor420() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor421() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor422() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor423() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor424() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor425() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor426() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor427() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor428() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor429() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor430() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor431() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor432() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, 0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor433() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor434() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor435() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor436() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor437() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor438() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor439() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor440() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor441() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor442() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor443() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor444() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor445() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor446() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor447() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor448() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor449() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor450() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor451() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor452() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor453() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor454() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor455() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor456() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, 1.5);
		Point p3 = new Point(-1.0, 1.732051);
		Point p4 = new Point(2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor457() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor458() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor459() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor460() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor461() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor462() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor463() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor464() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor465() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor466() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor467() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor468() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor469() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor470() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor471() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor472() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor473() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor474() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor475() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor476() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor477() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor478() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor479() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor480() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, 2.121320);
		Point p3 = new Point(-1.414214, 1.414214);
		Point p4 = new Point(2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor481() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor482() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor483() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor484() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor485() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor486() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor487() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor488() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor489() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor490() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor491() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor492() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor493() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor494() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor495() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor496() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor497() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor498() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor499() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor500() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor501() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor502() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor503() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor504() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, 2.598076);
		Point p3 = new Point(-1.732051, 1.0);
		Point p4 = new Point(1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor505() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor506() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor507() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor508() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor509() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor510() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor511() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor512() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor513() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor514() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor515() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor516() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor517() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor518() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor519() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor520() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor521() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor522() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor523() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor524() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor525() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor526() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor527() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor528() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(0.0, 3.0);
		Point p3 = new Point(-2.0, 0.0);
		Point p4 = new Point(0.0, 3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor529() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor530() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor531() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor532() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor533() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor534() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor535() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor536() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor537() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor538() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor539() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor540() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor541() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor542() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor543() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor544() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor545() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor546() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor547() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor548() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor549() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor550() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor551() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor552() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, 2.598076);
		Point p3 = new Point(-1.732051, -1.0);
		Point p4 = new Point(-1.5, 2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor553() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor554() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor555() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor556() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor557() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor558() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor559() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor560() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor561() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor562() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor563() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor564() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor565() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor566() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor567() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor568() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor569() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor570() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor571() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor572() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor573() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor574() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor575() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor576() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, 2.121320);
		Point p3 = new Point(-1.414214, -1.414214);
		Point p4 = new Point(-2.121320, 2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor577() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor578() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor579() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor580() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor581() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor582() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor583() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor584() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor585() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor586() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor587() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor588() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor589() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor590() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor591() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor592() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor593() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor594() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor595() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor596() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor597() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor598() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor599() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor600() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, 1.5);
		Point p3 = new Point(-1.0, -1.732051);
		Point p4 = new Point(-2.598076, 1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor601() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor602() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor603() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor604() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor605() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor606() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor607() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor608() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor609() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor610() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor611() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor612() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor613() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor614() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor615() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor616() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor617() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor618() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor619() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor620() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor621() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor622() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor623() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor624() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-3.0, 0.0);
		Point p3 = new Point(-0.0, -2.0);
		Point p4 = new Point(-3.0, 0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor625() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor626() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor627() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor628() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor629() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor630() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor631() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor632() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor633() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor634() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor635() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor636() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor637() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor638() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor639() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor640() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor641() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor642() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor643() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor644() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor645() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor646() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor647() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor648() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.598076, -1.5);
		Point p3 = new Point(1.0, -1.732051);
		Point p4 = new Point(-2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor649() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor650() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor651() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor652() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor653() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor654() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor655() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor656() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor657() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor658() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor659() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor660() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor661() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor662() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor663() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor664() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor665() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor666() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor667() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor668() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor669() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor670() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor671() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor672() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-2.121320, -2.121320);
		Point p3 = new Point(1.414214, -1.414214);
		Point p4 = new Point(-2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor673() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor674() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor675() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor676() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor677() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor678() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor679() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor680() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor681() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor682() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor683() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor684() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor685() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor686() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor687() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor688() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor689() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor690() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor691() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor692() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor693() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor694() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor695() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor696() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-1.5, -2.598076);
		Point p3 = new Point(1.732051, -1.0);
		Point p4 = new Point(-1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor697() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor698() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor699() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor700() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor701() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor702() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor703() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor704() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor705() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor706() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor707() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor708() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor709() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor710() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor711() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor712() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor713() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor714() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor715() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor716() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor717() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor718() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor719() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor720() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(-0.0, -3.0);
		Point p3 = new Point(2.0, -0.0);
		Point p4 = new Point(-0.0, -3.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor721() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor722() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor723() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor724() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor725() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor726() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor727() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor728() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor729() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor730() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor731() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor732() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor733() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor734() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor735() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor736() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor737() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor738() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor739() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor740() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor741() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor742() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor743() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor744() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(1.5, -2.598076);
		Point p3 = new Point(1.732051, 1.0);
		Point p4 = new Point(1.5, -2.598076);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor745() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor746() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor747() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor748() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor749() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor750() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor751() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor752() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor753() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor754() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor755() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor756() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor757() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor758() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor759() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor760() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor761() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor762() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor763() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor764() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor765() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor766() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor767() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor768() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.121320, -2.121320);
		Point p3 = new Point(1.414214, 1.414214);
		Point p4 = new Point(2.121320, -2.121320);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor769() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor770() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor771() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor772() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor773() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor774() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor775() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor776() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor777() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor778() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor779() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor780() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor781() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor782() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor783() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor784() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor785() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor786() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor787() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor788() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor789() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor790() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor791() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor792() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(2.598076, -1.5);
		Point p3 = new Point(1.0, 1.732051);
		Point p4 = new Point(2.598076, -1.5);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor793() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor794() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p2, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor795() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor796() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p3, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor797() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor798() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p1, p4, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor799() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p3, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor800() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p1, p4, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor801() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor802() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p3, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor803() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor804() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p2, p4, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor805() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p2, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor806() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p1, p4, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor807() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p1, p4);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor808() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p2, p4, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor809() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor810() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p3, p4, p2, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor811() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p2, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor812() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p1, p3, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor813() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p1, p3);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor814() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p2, p3, p1);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor815() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p1, p2);
			r.computeArea();
		});
	}

	@Test
	void test_Constructor816() {
		Point p1 = new Point(0.0, 0.0);
		Point p2 = new Point(3.0, -0.0);
		Point p3 = new Point(0.0, 2.0);
		Point p4 = new Point(3.0, -0.0);

		assertThrows(Exception.class, () -> {
			Rectangle r = new Rectangle(p4, p3, p2, p1);
			r.computeArea();
		});
	}


}